# Docker Compose configuration for AWS Cloud Map Prometheus Service Discovery API
#
# This file provides different service configurations for development and production use.

version: '3.8'

services:
  # Main application service
  aws-cloudmap-sd-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: aws-cloudmap-prometheus-sd-api:latest
    container_name: aws-cloudmap-sd-api
    ports:
      - "3030:3030"
    environment:
      # Server configuration
      - HOST=0.0.0.0
      - PORT=3030
      - RUST_LOG=info
      
      # AWS configuration (pass through from host environment)
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_PROFILE=${AWS_PROFILE}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - CLOUDMAP_NAMESPACE=${CLOUDMAP_NAMESPACE}
    volumes:
      # Mount AWS credentials from host (for development)
      - ~/.aws:/home/appuser/.aws:ro
      # Mount custom config if needed
      - ./config.json:/app/config.json:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/cloudmap_sd"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - cloudmap-network

  # Development service with hot reload (requires cargo-watch)
  aws-cloudmap-sd-api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: aws-cloudmap-prometheus-sd-api:dev
    container_name: aws-cloudmap-sd-api-dev
    ports:
      - "3030:3030"
    environment:
      - HOST=0.0.0.0
      - PORT=3030
      - RUST_LOG=debug
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_PROFILE=${AWS_PROFILE}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - CLOUDMAP_NAMESPACE=${CLOUDMAP_NAMESPACE}
    volumes:
      - .:/app
      - ~/.aws:/home/appuser/.aws:ro
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
    working_dir: /app
    command: cargo watch -x 'run'
    networks:
      - cloudmap-network
    profiles:
      - dev

  # Prometheus for testing service discovery
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - cloudmap-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - cloudmap-network
    profiles:
      - monitoring

networks:
  cloudmap-network:
    driver: bridge

volumes:
  cargo-cache:
  target-cache:
  grafana-storage:
